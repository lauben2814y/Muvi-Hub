plugins {
    alias(libs.plugins.android.application)
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'muvi.anime.hub'
    compileSdk 35

    defaultConfig {
        applicationId "muvi.anime.hub"
        minSdk 24
        targetSdk 35
        versionCode 10000
        versionName "1.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Signing will be handled by GitHub Actions or manually by developer
        }

        debug {
            // Debug builds
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = "21"  // Add this block
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.annotation
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.firebase.auth
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.play.services.auth
    implementation libs.googleid
    implementation libs.firebase.datatransport
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation libs.glide
    implementation libs.converter.gson
    implementation libs.logging.interceptor
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.github.sparrow007:carouselrecyclerview:1.2.6'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation 'com.google.firebase:firebase-messaging:24.1.0'
    implementation "com.github.tonyofrancis.Fetch:fetch2:3.4.1"

    implementation platform('com.google.firebase:firebase-bom:33.7.0')
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")
    implementation 'com.google.android.ump:user-messaging-platform:3.2.0'

    implementation 'androidx.credentials:credentials:1.3.0'

    implementation 'androidx.credentials:credentials-play-services-auth:1.3.0'
    implementation 'com.google.android.libraries.identity.googleid:googleid:1.1.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3'

    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:12.1.2'
    implementation 'androidx.media3:media3-exoplayer:1.5.1'
    implementation 'androidx.media3:media3-ui:1.5.1'
    implementation 'androidx.media3:media3-exoplayer-dash:1.5.1'
    implementation 'com.google.android.gms:play-services-ads:23.6.0'
    implementation 'com.google.android.play:app-update:2.1.0'
    implementation 'com.google.android.play:app-update-ktx:2.1.0'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.tbuonomo:dotsindicator:4.3'
}

// Optional: Local signing configuration for development
// Create this section only if you want to sign locally during development
if (rootProject.file('local.properties').exists()) {
    Properties localProperties = new Properties()
    localProperties.load(rootProject.file('local.properties').newDataInputStream())

    if (localProperties.getProperty('RELEASE_STORE_FILE') != null) {
        android {
            signingConfigs {
                release {
                    storeFile file(localProperties.getProperty('RELEASE_STORE_FILE'))
                    storePassword localProperties.getProperty('RELEASE_STORE_PASSWORD')
                    keyAlias localProperties.getProperty('RELEASE_KEY_ALIAS')
                    keyPassword localProperties.getProperty('RELEASE_KEY_PASSWORD')
                }
            }
            buildTypes {
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}

