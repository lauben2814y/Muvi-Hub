name: Build and Release APK
on:
  workflow_dispatch:  # Allows manual trigger
  push:
    tags:
      - 'v*'  # Matches any tag starting with 'v'
      
# Important: Add permissions for the GITHUB_TOKEN
permissions:
  contents: write  # Needed to create releases
  actions: read    # Needed to read workflow info
  
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Echo tag info
      run: |
        echo "Triggered by tag: ${{ github.ref }}"
        echo "Repository: ${{ github.repository }}"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build Release APK
      run: ./gradlew assembleRelease
    
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY_BASE64 }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="manual-$(date +'%Y%m%d-%H%M%S')"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NAME=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    # This step just uploads the APK to the existing release
    - name: Upload APK to Existing Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        files: |
          ${{ steps.sign_app.outputs.signedReleaseFile }}
        # Don't specify name, body, etc. - use what's already in the release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
